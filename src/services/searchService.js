import { callApiPost, generateApiPayload, validateSearchResponse, retryApiCall } from './apiUtils.js';
import { API_HOSTS, getEndpointConfig, ENVIRONMENT_CONFIG } from './apiConfig.js';
import { PROJECT_DEBUGGER } from '../utils/debugger.js';

/**
 * Servicio especializado para b√∫squedas de productos
 * Utiliza las utilidades API externalizadas
 */

/**
 * Realiza b√∫squeda de productos con estrategia dual
 * @param {string} searchTerm - T√©rmino de b√∫squeda
 * @param {Object} filtros - Filtros adicionales opcionales
 * @returns {Promise<string[]>} Array de SKUs encontrados
 */
export const searchProducts = async (searchTerm, filtros = {}) => {
  if (ENVIRONMENT_CONFIG.enableLogging) {
    console.log('üîç Iniciando b√∫squeda:', searchTerm);
  }

  let migratedError = null;

  // Estrategia 1: M√©todo migrado de PHP con reintentos
  try {
    const searchWithRetry = async () => {
      const jsonPayload = generateApiPayload(searchTerm, "Y", filtros);
      return await callApiPost(
        API_HOSTS.SEARCH.HOST,
        API_HOSTS.SEARCH.PORT,
        API_HOSTS.SEARCH.PATH,
        jsonPayload
      );
    };

    const apiResponse = await retryApiCall(searchWithRetry, 2, 1000);
    const validation = validateSearchResponse(apiResponse);

    if (validation.isValid) {
      if (ENVIRONMENT_CONFIG.enableLogging) {
        console.log('‚úÖ B√∫squeda exitosa con m√©todo migrado:', validation.skus.length, 'SKUs');
      }
      return validation.skus;
    }

    if (validation.hasError) {
      console.warn('‚ö†Ô∏è M√©todo migrado fall√≥:', validation.errorMessage);
      throw new Error(validation.errorMessage);
    }
  } catch (error) {
    migratedError = error;
    console.log('üîÑ M√©todo migrado fall√≥, intentando m√©todo alternativo...');
  }

  // Estrategia 2: M√©todo directo con axios (fallback)
  try {
    const directSearch = async () => {
      const config = getEndpointConfig('SEARCH');
      const requestData = {
        pregunta: searchTerm,
        buscador: "Y",
        filtros: {
          linea_de_producto: "",
          marca_de_producto: "",
          almacen_codigo: "",
          tipo_producto: "",
          ...filtros
        }
      };

      return await callApiPost(
        API_HOSTS.SEARCH.HOST,
        API_HOSTS.SEARCH.PORT,
        API_HOSTS.SEARCH.PATH,
        requestData,
        { timeout: config.timeout, headers: config.headers }
      );
    };

    const response = await retryApiCall(directSearch, 2, 1000);
    const validation = validateSearchResponse(response);

    if (validation.isValid) {
      if (ENVIRONMENT_CONFIG.enableLogging) {
        console.log('‚úÖ B√∫squeda exitosa con m√©todo directo:', validation.skus.length, 'SKUs');
      }
      return validation.skus;
    }

    if (validation.hasError) {
      throw new Error(validation.errorMessage);
    }

    return validation.skus; // Fallback con datos parciales
  } catch (directError) {
    console.error('‚ùå Ambos m√©todos de b√∫squeda fallaron');
    console.error('M√©todo migrado:', migratedError?.message || 'Error desconocido');
    console.error('M√©todo directo:', directError.message);
    
    // Retornar array vac√≠o en lugar de datos mock para producci√≥n
    if (ENVIRONMENT_CONFIG.isProduction) {
      return [];
    }
    
    // En desarrollo, retornar algunos SKUs de ejemplo para testing
    console.log('üîß Modo desarrollo: retornando SKUs de ejemplo');
    return ['TE-24155', 'TE-27535', 'LG-24MS500'];
  }
};

/**
 * B√∫squeda con filtros espec√≠ficos
 * @param {string} searchTerm - T√©rmino de b√∫squeda
 * @param {Object} filtros - Filtros espec√≠ficos
 * @returns {Promise<string[]>} Array de SKUs filtrados
 */
export const searchProductsWithFilters = async (searchTerm, filtros) => {
  return await searchProducts(searchTerm, filtros);
};

/**
 * B√∫squeda por categor√≠a
 * @param {string} searchTerm - T√©rmino de b√∫squeda
 * @param {string} categoria - Categor√≠a espec√≠fica
 * @returns {Promise<string[]>} Array de SKUs de la categor√≠a
 */
export const searchProductsByCategory = async (searchTerm, categoria) => {
  const filtros = {
    linea_de_producto: categoria
  };
  return await searchProducts(searchTerm, filtros);
};

/**
 * B√∫squeda por marca
 * @param {string} searchTerm - T√©rmino de b√∫squeda
 * @param {string} marca - Marca espec√≠fica
 * @returns {Promise<string[]>} Array de SKUs de la marca
 */
export const searchProductsByBrand = async (searchTerm, marca) => {
  const filtros = {
    marca_de_producto: marca
  };
  return await searchProducts(searchTerm, filtros);
};
